//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/InputSystem/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Runes"",
            ""id"": ""55cf8624-e5a1-4f0e-a234-b5e902d31757"",
            ""actions"": [
                {
                    ""name"": ""Rune1"",
                    ""type"": ""Button"",
                    ""id"": ""f7d61426-ef5d-4c60-8e79-307e0e387878"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rune2"",
                    ""type"": ""Button"",
                    ""id"": ""462eb616-f109-4706-85b8-c92e95380468"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rune3"",
                    ""type"": ""Button"",
                    ""id"": ""454d5186-c310-454c-a177-3320990be6ce"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LaunchRunes"",
                    ""type"": ""Button"",
                    ""id"": ""20953ca9-1e87-43e3-8fdf-3349770ffbb7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ade05e19-44f0-4978-8556-114cb583f490"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rune1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e9cd21c-aa44-4983-ac9d-bac1e2d6823e"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LaunchRunes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""996b1272-f4da-49cc-85ae-a2cf7bf5c2e1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rune2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""408ba361-d003-4431-a13a-24dafe93af88"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rune3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameInputs"",
            ""id"": ""d1164326-ad28-41c5-88e1-9e2bc93c9cba"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""95e88926-5e6a-427e-91d9-e8d25b124055"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9aa0add1-205f-49d5-aafb-71da8e8532c0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Runes
        m_Runes = asset.FindActionMap("Runes", throwIfNotFound: true);
        m_Runes_Rune1 = m_Runes.FindAction("Rune1", throwIfNotFound: true);
        m_Runes_Rune2 = m_Runes.FindAction("Rune2", throwIfNotFound: true);
        m_Runes_Rune3 = m_Runes.FindAction("Rune3", throwIfNotFound: true);
        m_Runes_LaunchRunes = m_Runes.FindAction("LaunchRunes", throwIfNotFound: true);
        // GameInputs
        m_GameInputs = asset.FindActionMap("GameInputs", throwIfNotFound: true);
        m_GameInputs_Pause = m_GameInputs.FindAction("Pause", throwIfNotFound: true);
    }

    ~@PlayerInputs()
    {
        UnityEngine.Debug.Assert(!m_Runes.enabled, "This will cause a leak and performance issues, PlayerInputs.Runes.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_GameInputs.enabled, "This will cause a leak and performance issues, PlayerInputs.GameInputs.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Runes
    private readonly InputActionMap m_Runes;
    private List<IRunesActions> m_RunesActionsCallbackInterfaces = new List<IRunesActions>();
    private readonly InputAction m_Runes_Rune1;
    private readonly InputAction m_Runes_Rune2;
    private readonly InputAction m_Runes_Rune3;
    private readonly InputAction m_Runes_LaunchRunes;
    public struct RunesActions
    {
        private @PlayerInputs m_Wrapper;
        public RunesActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rune1 => m_Wrapper.m_Runes_Rune1;
        public InputAction @Rune2 => m_Wrapper.m_Runes_Rune2;
        public InputAction @Rune3 => m_Wrapper.m_Runes_Rune3;
        public InputAction @LaunchRunes => m_Wrapper.m_Runes_LaunchRunes;
        public InputActionMap Get() { return m_Wrapper.m_Runes; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RunesActions set) { return set.Get(); }
        public void AddCallbacks(IRunesActions instance)
        {
            if (instance == null || m_Wrapper.m_RunesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RunesActionsCallbackInterfaces.Add(instance);
            @Rune1.started += instance.OnRune1;
            @Rune1.performed += instance.OnRune1;
            @Rune1.canceled += instance.OnRune1;
            @Rune2.started += instance.OnRune2;
            @Rune2.performed += instance.OnRune2;
            @Rune2.canceled += instance.OnRune2;
            @Rune3.started += instance.OnRune3;
            @Rune3.performed += instance.OnRune3;
            @Rune3.canceled += instance.OnRune3;
            @LaunchRunes.started += instance.OnLaunchRunes;
            @LaunchRunes.performed += instance.OnLaunchRunes;
            @LaunchRunes.canceled += instance.OnLaunchRunes;
        }

        private void UnregisterCallbacks(IRunesActions instance)
        {
            @Rune1.started -= instance.OnRune1;
            @Rune1.performed -= instance.OnRune1;
            @Rune1.canceled -= instance.OnRune1;
            @Rune2.started -= instance.OnRune2;
            @Rune2.performed -= instance.OnRune2;
            @Rune2.canceled -= instance.OnRune2;
            @Rune3.started -= instance.OnRune3;
            @Rune3.performed -= instance.OnRune3;
            @Rune3.canceled -= instance.OnRune3;
            @LaunchRunes.started -= instance.OnLaunchRunes;
            @LaunchRunes.performed -= instance.OnLaunchRunes;
            @LaunchRunes.canceled -= instance.OnLaunchRunes;
        }

        public void RemoveCallbacks(IRunesActions instance)
        {
            if (m_Wrapper.m_RunesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRunesActions instance)
        {
            foreach (var item in m_Wrapper.m_RunesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RunesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RunesActions @Runes => new RunesActions(this);

    // GameInputs
    private readonly InputActionMap m_GameInputs;
    private List<IGameInputsActions> m_GameInputsActionsCallbackInterfaces = new List<IGameInputsActions>();
    private readonly InputAction m_GameInputs_Pause;
    public struct GameInputsActions
    {
        private @PlayerInputs m_Wrapper;
        public GameInputsActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_GameInputs_Pause;
        public InputActionMap Get() { return m_Wrapper.m_GameInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameInputsActions set) { return set.Get(); }
        public void AddCallbacks(IGameInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_GameInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameInputsActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IGameInputsActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IGameInputsActions instance)
        {
            if (m_Wrapper.m_GameInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_GameInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameInputsActions @GameInputs => new GameInputsActions(this);
    public interface IRunesActions
    {
        void OnRune1(InputAction.CallbackContext context);
        void OnRune2(InputAction.CallbackContext context);
        void OnRune3(InputAction.CallbackContext context);
        void OnLaunchRunes(InputAction.CallbackContext context);
    }
    public interface IGameInputsActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
}
